# Model arguments
model_name_or_path: lamm-mit/BioSilk_Llama3.1-8b-Instruct-CPT-SFT
model_revision: main

resume_from_checkpoint: true

torch_dtype: bfloat16
attn_implementation: flash_attention_2

# Data training arguments
#chat_template: '{%- if messages[0]["role"] == "system" %}\n    {%- set system_message = messages[0]["content"]|default("", true) %}\n    {%- set loop_messages = messages[1:] %}\n{%- else %}\n    {%- set loop_messages = messages %}\n{%- endif %}\n{%- if not tools is defined %}\n    {%- set tools = none %}\n{%- endif %}\n{%- set user_messages = loop_messages | selectattr("role", "equalto", "user") | list %}\n\n{%- for message in loop_messages | rejectattr("role", "equalto", "tool") | rejectattr("role", "equalto", "tool_results") | selectattr("tool_calls", "undefined") %}\n    {%- if loop.first %}\n        {%- if message["role"] not in ["user", "assistant"] %}\n            {{- raise_exception("The first message must be either user or assistant") }}\n        {%- endif %}\n    {%- else %}\n        {%- if (message["role"] == "user") == (loop_messages[loop.index0 - 1]["role"] == "user") %}\n            {{- raise_exception("After the first message, conversation roles must alternate user/assistant/user/assistant/...") }}\n        {%- endif %}\n    {%- endif %}\n{%- endfor %}\n\n{%- for message in loop_messages %}\n    {%- if loop.first %}\n        {%- if message["role"] == "user" %}\n            {{- bos_token }}\n            {%- if tools is not none and (message == user_messages[-1]) %}\n                {{- "[AVAILABLE_TOOLS] [" }}\n                {%- for tool in tools %}\n            {%- set tool = tool.function %}\n            {{- \'{"type": "function", "function": {\' }}\n            {%- for key, val in tool.items() if key != "return" %}\n                {%- if val is string %}\n                {{- \'"\' + key + \'": "\' + val + \'"\' }}\n                {%- else %}\n                {{- \'"\' + key + \'": \' + val|tojson }}\n                {%- endif %}\n                {%- if not loop.last %}\n                {{- ", " }}\n                {%- endif %}\n            {%- endfor %}\n            {{- "}}" }}\n                    {%- if not loop.last %}\n                        {{- ", " }}\n                    {%- else %}\n                        {{- "]" }}\n                    {%- endif %}\n                {%- endfor %}\n                {{- "[/AVAILABLE_TOOLS]" }}\n            {%- endif %}\n            {%- if system_message is defined %}\n                {%- if system_message %}\n                    {{- "[INST] " + system_message + "\n\n" + (message["content"]|default("", true)) + "[/INST]" }}\n                {%- else %}\n                    {{- "[INST] " + (message["content"]|default("", true)) + "[/INST]" }}\n                {%- endif %}\n            {%- else %}\n                {{- "[INST] " + (message["content"]|default("", true)) + "[/INST]" }}\n            {%- endif %}\n        {%- elif message["role"] == "assistant" %}\n            {{- " " + (message["content"]|default("", true)) + eos_token }}\n        {%- endif %}\n    {%- elif message["role"] == "user" %}\n        {{- "[INST] " + (message["content"]|default("", true)) + "[/INST]" }}\n    {%- elif message["role"] == "tool_calls" or message.tool_calls is defined %}\n        {%- if message.tool_calls is defined %}\n            {%- set tool_calls = message.tool_calls %}\n        {%- else %}\n            {%- set tool_calls = message.content|default([], true) %}\n        {%- endif %}\n        {{- "[TOOL_CALLS] [" }}\n        {%- for tool_call in tool_calls %}\n            {%- set out = tool_call.function|tojson %}\n            {{- out[:-1] }}\n            {%- if not tool_call.id is defined or tool_call.id|length != 9 %}\n                {{- raise_exception("Tool call IDs should be alphanumeric strings with length 9!") }}\n            {%- endif %}\n            {{- \', "id": "\' + tool_call.id + \'"\' }}\n            {%- if not loop.last %}\n                {{- ", " }}\n            {%- else %}\n                {{- "]" + eos_token }}\n            {%- endif %}\n        {%- endfor %}\n    {%- elif message["role"] == "assistant" %}\n        {{- " " + (message["content"]|default("", true)) + eos_token}}\n    {%- elif message["role"] == "tool_results" or message["role"] == "tool" %}\n        {%- if message.content is defined and message.content.content is defined %}\n            {%- set content = message.content.content|default("", true) %}\n        {%- else %}\n            {%- set content = message.content|default("", true) %}\n        {%- endif %}\n        {{- \'[TOOL_RESULTS] {"content": \' + content|tojson + ", " }}\n        {%- if not message.tool_call_id is defined or message.tool_call_id|length != 9 %}\n            {{- raise_exception("Tool call IDs should be alphanumeric strings with length 9!") }}\n        {%- endif %}\n        {{- \'"call_id": "\' + message.tool_call_id + \'"}[/TOOL_RESULTS]\' }}\n    {%- else %}\n        {{- raise_exception("Only user and assistant roles are supported, with the exception of an initial optional system message!") }}\n    {%- endif %}\n{%- endfor %}'
  
dataset_mixer:
  lamm-mit/orpo-dpo-mix-40k: 1.0
  lamm-mit/bio-inspired-DPO: 1.0
  lamm-mit/spider-silk-DPO: 1.0

dataset_splits:
- train

preprocessing_num_workers: 8

# ORPOTrainer arguments
bf16: true

beta: 0.1
gradient_accumulation_steps: 1
gradient_checkpointing: true
gradient_checkpointing_kwargs:
  use_reentrant: true
hub_model_id: lamm-mit/BioSilk_Llama3.1-8b-Instruct-CPT-SFT-ORPO
hub_private_repo: true
learning_rate: 3.0e-06
log_level: info
logging_steps: 10
#lr_scheduler_type: inverse_sqrt
lr_scheduler_type: cosine

max_length: 2500
max_prompt_length: 2000
num_train_epochs: 3
#optim: adamw_bnb_8bit
output_dir: data/BioSilk_Llama3.1-8b-Instruct-CPT-SFT-ORPO
per_device_eval_batch_size: 1
per_device_train_batch_size: 3

push_to_hub: true
report_to:
- wandb

save_strategy: epoch
hub_strategy: every_save

save_total_limit: 5
seed: 42
warmup_steps: 100